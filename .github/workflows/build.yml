name: build

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  sanity:
    name: "basic sanity build"

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install build dependencies
        run: sudo pip install meson ninja sphinx sphinx-rtd-theme

      - name: configure build
        run: meson setup build

      - name: compile
        run: meson compile -C build

      - name: unit tests
        run: |
          meson test -C build libvfn:

  sparse:
    name: "run sparse"

    needs: [sanity]

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install build dependencies
        run: sudo pip install meson ninja

      - name: install sparse
        run: sudo apt-get -y install sparse

      - name: configure build
        run: meson setup build

      - name: run sparse
        run: meson compile -C build sparse

  cc-builds:
    name: "compiler builds"

    needs: [sanity]

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install build dependencies
        run: sudo pip install meson ninja

      - name: configure build
        run: CC=${{ matrix.compiler }} meson setup build

      - name: compile
        run: meson compile -C build

  dist-builds:
    name: "distribution builds"

    needs: [sanity]

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container:
          - {os: 'almalinux', dh: 'almalinux', ver: '8'}
          - {os: 'almalinux', dh: 'almalinux', ver: '9'}
          - {os: 'archlinux', dh: 'archlinux', ver: 'latest'}
          - {os: 'debian', dh: 'debian', ver: 'bookworm'}
          - {os: 'debian', dh: 'debian', ver: 'bullseye'}
          - {os: 'debian', dh: 'debian', ver: 'buster'}
          - {os: 'fedora', dh: 'fedora', ver: '36'}
          - {os: 'fedora', dh: 'fedora', ver: '35'}
          - {os: 'rockylinux', dh: 'rockylinux', ver: '8'}
          - {os: 'ubuntu', dh: 'ubuntu', ver: 'jammy'}
          - {os: 'ubuntu', dh: 'ubuntu', ver: 'focal'}
          - {os: 'ubuntu', dh: 'ubuntu', ver: 'bionic'}

    container:
      image: ${{ matrix.container.dh }}:${{ matrix.container.ver }}

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install dependencies
        env:
          SETUP_SCRIPT: .github/scripts/build/${{ matrix.container.os}}-setup-${{ matrix.container.ver }}.sh
        run: ${SETUP_SCRIPT}

      - name: configure build
        run: meson setup build -Dlibnvme=disabled

      - name: compile
        run: ninja -C build

      - name: upload log
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: meson log
          path: build/meson-logs/meson-log.txt

      - name: unit tests
        run: meson test -C build "libvfn:"

  device-test:
    name: "run emulated nvme device tests"

    needs: [sanity]

    runs-on: [self-hosted, kvm]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || ((github.event_name == 'pull_request') && contains(github.event.pull_request.labels.*.name, 'ok-for-test'))
    env:
      VMCTL_VMROOT: "/home/actions/machines"
      VMCONFIG: ".github/vmconfig/null.conf"
      DOCKER_IMAGE: "ghcr.io/birkelund/qemu-system-x86_64-static:nvme-next"

    steps:
      - name: pull qemu-system-x86_64-static:master
        run: docker pull ghcr.io/birkelund/qemu-system-x86_64-static:nvme-next

      - name: checkout libvfn
        uses: actions/checkout@v3

      - name: create dist package
        run: |
          meson subprojects download
          meson setup build
          meson dist -C build --no-tests --include-subprojects

      - name: reset vm
        run: |
          rm -f "${VMCTL_VMROOT}/img/null.qcow2"

      - name: launch vm
        run: |
          vmctl -c "$VMCONFIG" run -d "$DOCKER_IMAGE" --background
          vmctl -c "$VMCONFIG" ssh -w -- echo vm is up

      - name: copy source
        run: |
          scp -P 2222 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null build/meson-dist/libvfn-*.tar.xz root@localhost:

      - name: build
        run: |
          vmctl -c "$VMCONFIG" ssh -- -T <<EOF
          mkdir libvfn
          tar -Jxf libvfn-*.tar.xz -C libvfn --strip 1
          cd libvfn
          meson setup build
          ninja -C build
          EOF

      - name: setup device
        run: |
          vmctl -c "$VMCONFIG" ssh -- -T <<EOF
          modprobe vfio-pci
          cd libvfn
          ./build/tools/vfntool/vfntool -v -d 0000:01:00.0
          EOF

      - name: run tests
        run: |
          vmctl -c "$VMCONFIG" ssh -- -T <<EOF
          cd libvfn
          meson test -C build libvfn: --suite device --test-args "-d 0000:01:00.0 -N 1"
          EOF

      - name: shutdown vm
        if: always()
        run: docker stop null
